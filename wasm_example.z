; Odin-style declarations and pointers
($define .CONSTANT alias ($macro (($declare name code) ($declare T type)) ($type .VOID)
  ($assert ($operator== name .symbol))
  ($insert "($define .CONSTANT % %)" name type)
  ($insert "($define .CONSTANT ^% %)" name ($type .POINTER ($struct-literal #child type)))
  ($insert "($define .CONSTANT [^]% %)" name ($type .POINTER ($struct-literal #kind .MULTIPLE #child type)))
  ($insert "($define .CONSTANT []% %)" name ($type .POINTER ($struct-literal #kind .SLICE #child type)))
))

($define ($operator| .CONSTANT .EXPORT) :: ($macro (($declare name code) ($declare value code)) ($type .VOID)
  ($assert ($operator== name .symbol))
  ($if ($operator&& ($operator== value .symbol) ($operator== ($type-of value.symbol) ($type .TYPE)))
    ($insert "(alias % %)" name value)
    ($insert "($define .CONSTANT % %)" name type)
  )
))

($define ($operator| .CONSTANT .EXPORT) : ($macro (($declare name code) ($declare value code)) ($type .VOID)
  ($assert ($operator== name .symbol))
  ($insert "($define .VARIABLE % %)" name ($cast type 0))
))

; Zig-style type system
(:: type ($type .TYPE))
(:: code ($type .CODE))
(:: void ($type .VOID))
(:: bool ($type .BOOL))

(:: true ($cast bool 1))
(:: false ($cast bool 0))
(:: null ($cast ($type .NULL) 0))

(:: u8 ($type .INTEGER ($struct-literal #bits 8 #signedness .UNSIGNED)))

(:: * $operator*)

; usage
(:: WASM_PAGE_SIZE (* 64 1024))
(:: TEMPORARY_STORAGE_SIZE (* 16 1024))

(: permanent_storage []u8)
